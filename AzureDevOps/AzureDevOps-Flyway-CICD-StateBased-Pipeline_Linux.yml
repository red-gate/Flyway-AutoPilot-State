# This is a best practice Flyway Enterprise workflow to help you get started with Azure DevOps and a Windows Runner

# ===========================
# Pipeline Name: AzureDevOps-Flyway-CICD-StateBased-Pipeline_Linux.yml
# Version: 1.0.0
# Author: Redgate Software Ltd
# Last Updated: 2025-03-17
# Description: Azure DevOps YAML Pipeline for State Based Flyway workflows using Linux Runners
# ===========================

name: Flyway-AutoPilot-Simple-State-Pipeline-Linux

# Uncomment and remove the word 'none' to enable triggers on specific branches or paths:
trigger: none
#   branches:
#     include:
#       - release
#   paths:
#     include:
#       - schema-model/*

# Step 1: Stage Variables - So that all variables are kept secure, it's recommended that Library Variable Groups are used.
### Global Stage Variables - Create 'AutoPilotGlobal' Variable Group ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# "FLYWAY_EMAIL" - Enter the email address linked to the Redgate Account that created the PAT
# "FLYWAY_TOKEN" - Enter the PAT Value (This should be treated like a password and thus as a secure variable. Consider using a Library Group or Secure Variable for this value)
# "AGENT_POOL" - To be set to the agent pool name to be used
# "FLYWAY_AUTH_DISABLED" (Optional) - Create and set to true to skip the auth check stage
# "FLYWAY_CLI_INSTALL"  (Optional) - Default is empty (Or false): Set as 'true' to enable a Flyway CLI validate and Install step
### End of Global Stage Variable Group ###

### Build Stage Variables - Create 'AutoPilotBuild' Variable Group ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# "TARGET_DATABASE_USERNAME"- Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "TARGET_DATABASE_PASSWORD" - Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "CUSTOM_PARAMS": Optional - Used for passing custom Flyway Parameters to each Flyway command
### End of Build Stage Variable Group ###

### Test Stage Variables - Create 'AutoPilotTest' Variable Group ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# "TARGET_DATABASE_USERNAME" - Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "TARGET_DATABASE_PASSWORD" - Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "CUSTOM_PARAMS": Optional - Used for passing custom Flyway Parameters to each Flyway command
### End of Test Stage Variable Group ###

### Prod Stage Variables - Create 'AutoPilotProd' Variable Group ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# "TARGET_DATABASE_USERNAME" - Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "TARGET_DATABASE_PASSWORD" - Leave Username/Password values blank if integratedSecurity utilized (Which is default behaviour)
# "CUSTOM_PARAMS": Optional - Used for passing custom Flyway Parameters to each Flyway command
### End of Prod Stage Variable Group ###

pool:
  # Step 2 - Set which Agent Pool is to be used #
  name: "$(AGENT_POOL)" # To be set when a self-hosted agent pool is to be used alongside this pipeline
  #vmImage: "ubuntu-latest" # To be used when a microsoft-hosted agent is used alongside this pipeline (Such as ubuntu-latest/windows-latest)

variables:

  # This is the relative path to the migrations folder in your project, such as:
  # $(System.DefaultWorkingDirectory)\project
  # The default is to have the migrations folder in the same directory as the yml file
  WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)
  system.debug: 'false' # Set this to true to enable verbose logging on your pipeline run
  
  # Step 2 - Securely authenticating Flyway with PATs #
  ### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
  group: "AutoPilotGlobal" # FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL/ (See below for examples)
  # Personal Access Tokens (PATs) are the recommended method of authorizing Flyway during a non-interactive session
  # Details on how to do this can be found here: https://documentation.red-gate.com/flyway/flyway-cli-and-api/tutorials/tutorial-personal-access-tokens
  # Documentation on all available Authentication methods can be found here: https://documentation.red-gate.com/fd/flyway-licensing-263061944.html
  # "FLYWAY_EMAIL" - Enter the email address linked to the Redgate Account that created the PAT
  # "FLYWAY_TOKEN" - Enter the PAT Value (This should be treated like a password and thus as a secure variable. Consider using a Library Group or Secure Variable for this value)
  ### End of AutoPilotGlobal Variable Group Creation ###

  # Optional - For ephemeral agents/runners, it's necessary to validate Flyway is installed on each run. Set the below to true to enable the functionality
  FLYWAY_CLI_INSTALL_CHECK: "$(FLYWAY_CLI_INSTALL)" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "Latest" # This outlines the version of Flyway CLI that will be downloaded if no Flyway CLI is detected on the target agent (Examples - '11.0.0' for specific version. Or 'Latest' for latest version)
  FLYWAY_INSTALL_DIRECTORY: "" # The path on the agent machine where Flyway CLI will be installed

  # Optional: Side Quest #2 - Using the Flyway Pipeline Integration - https://flyway.red-gate.com/ For More Details
  FLYWAY_PUBLISH_RESULT: "true" # Set this value to true to enable Flyway Pipelines and track your releases centrally!
  FLYWAY_DRIFT_ON_MIGRATE: "true" # Set this value to true to enable Flyway Pipelines drift detection and track your drift centrally!

### End of Pipeline Variables - No further changes required below this line for default workflow ###

stages:
  - stage: Build # Tip - The build stage is a great way of gaining quick early feedback about upcoming releases. It simply needs to point to an empty database to function.
    displayName: Build Stage 
    jobs:
    - job: Build
      variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotBuild" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD
      # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure in either Variable Groups (See above) or Secure Variables (Click 'Variables' in top right corner of pipeline editor)
      - name: DATABASE_NAME
        value: "AutoPilotBuild"
      - name: SOURCE_ENVIRONMENT
        value: "schemaModel"
      - name: TARGET_ENVIRONMENT
        value: "Build" # This variable refers to the environment name present in the Flyway Projects TOML file.
      - name: SCRIPT_FILENAME
        value: "Flyway-$(DATABASE_NAME)-AutoDeploymentScript.sql"
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: EXECUTE_BUILD
        value: "true" # Turn to false to skip the build stage tasks
      - name: publishArtifacts
        value: "true" # Turn to false to skip the artifact upload

      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(eq(variables['EXECUTE_BUILD'], true), ne(variables['FLYWAY_AUTH_DISABLED'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Prepare: Detect differences and create deployment script
        - script: |
            # Run Flyway prepare command and capture output
            echo "Flyway CLI - Detecting differences between $(SOURCE_ENVIRONMENT) and $(TARGET_ENVIRONMENT)"
              flywayDiffs=$(flyway prepare \
                -prepare.source="$(SOURCE_ENVIRONMENT)" \
                -prepare.target="$(TARGET_ENVIRONMENT)" \
                -environments.Build.user="$(TARGET_DATABASE_USERNAME)" \
                -environments.Build.password="$(TARGET_DATABASE_PASSWORD)" \
                -prepare.scriptFilename="$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)" \
                -prepare.force="true" \
                -configFiles="$(WORKING_DIRECTORY)/flyway.toml" \
                -schemaModelLocation="$(WORKING_DIRECTORY)/schema-model" \
                 $(CUSTOM_PARAMETERS) 2>&1)

              # Capture exit code
              EXIT_CODE=$?

              # Display output in console
              echo "$flywayDiffs"

              # Check if the prepare command succeeded and handle logic accordingly
              if [[ $EXIT_CODE -eq 0 && "$flywayDiffs" == *"no differences detected"* ]]; then
                echo "No changes to generate. Exiting script gracefully."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED]false"
                exit 0  # Graceful exit
              elif [[ $EXIT_CODE -eq 0 ]]; then
                echo "Changes detected. Proceeding with further steps."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED]true"
              else
                echo "Error: The flyway prepare command failed. Exiting script with error."
                exit 1  # Exit with error
              fi
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway CLI - Prepare Scripts'
          condition: and(succeeded(), eq(variables['EXECUTE_BUILD'], true))
          env:
            FLYWAY_CLEAN_DISABLED: false # This should only be disabled for temporary sandbox databases, like Build
        # Step 3 - Deploy: Deploy changes to target environment
        - task: Bash@3
          displayName: 'Flyway CLI - Deploy Changes'
          condition: and(succeeded(), eq(variables['CHANGES_DETECTED'], 'true'), eq(variables['EXECUTE_BUILD'], 'true'))
          inputs:
            targetType: 'inline'
            script: |
              echo "Flyway CLI - Deploying differences to: $(TARGET_ENVIRONMENT)"
              flyway deploy \
                -environment="$(TARGET_ENVIRONMENT)" \
                -environments.Build.user="$(TARGET_DATABASE_USERNAME)" \
                -environments.Build.password="$(TARGET_DATABASE_PASSWORD)" \
                -deploy.scriptFilename="$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)" \
                $(CUSTOM_PARAMETERS)

        # ADO - Copy in-scope build files to artifact directory 
        - task: CopyFiles@2
          condition: succeeded()
          continueOnError: true
          inputs:
            SourceFolder: '$(WORKING_DIRECTORY)'
            Contents: |
              !flyway-*/**/*
              !.git/**/*
              !.git*/**/*
              **/schema-model/**/*
              **/Artifact/**/*
              **/migrations/**/*
              **/backups/**/*
              **/flyway.toml
              **/Filter.scpf
            TargetFolder: '$(System.ArtifactsDirectory)'
        # ADO - Publish Artifact Directory
        - task: PublishBuildArtifacts@1 # This step publishes all the validated Flyway Project files as a build artifact
          condition: succeeded()
          continueOnError: true
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: 'Flyway-CI-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

  - stage: Test
    displayName: Test Stage
    dependsOn: Build
    #pool: "" # By default the global Agent Pool will be used for all stages. Each stage could instead be given a custom Agent Pool here if required, typically for security reasons.
    variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotTest" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_DATABASE_URL/REPORT_DATABASE_USER/REPORT_DATABASE_PASSWORD
      # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure
      - name: DATABASE_NAME
        value: "AutoPilotTest"
      - name: SOURCE_ENVIRONMENT
        value: "schemaModel"
      - name: TARGET_ENVIRONMENT # This variable refers to the environment name present in the Flyway Projects TOML file.
        value: "Test"
      - name: SCRIPT_FILENAME
        value: "Flyway-$(DATABASE_NAME)-AutoDeploymentScript.sql"
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: generateReport
        value: "true" # Turn to false to skip the CHECK report stage tasks
      - name: pauseForCodeReview
        value: "false"
      - name: FLYWAY_CHECK_DRIFT_ON_MIGRATE
        value: "$(FLYWAY_DRIFT_ON_MIGRATE)" # Setting this variable to true will enable the Flyway Pipelines drift detection
    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition: 
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifact'
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), eq(variables['generateReport'], true), ne(variables['FLYWAY_AUTH_DISABLED'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        - task: Bash@3
          name: 'prepareScript'
          displayName: 'Flyway CLI - Prepare Script'
          condition: and(succeeded(), eq(variables['generateReport'], 'true'))
          inputs:
            targetType: 'inline'
            script: |
              # Run Flyway prepare command and capture output
              echo "Flyway CLI - Detecting differences between $(SOURCE_ENVIRONMENT) and $(TARGET_ENVIRONMENT)"
              flywayDiffs=$(flyway prepare \
                "-prepare.source=$(SOURCE_ENVIRONMENT)" \
                "-prepare.target=$(TARGET_ENVIRONMENT)" \
                "-environments.$(TARGET_ENVIRONMENT).user=$(TARGET_DATABASE_USERNAME)" \
                "-environments.$(TARGET_ENVIRONMENT).password=$(TARGET_DATABASE_PASSWORD)" \
                "-prepare.scriptFilename=$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)" \
                -configFiles="$(WORKING_DIRECTORY)/flyway.toml" \
                $(CUSTOM_PARAMETERS) 2>&1)

              # Capture exit code
              EXIT_CODE=$?

              # Display output in console
              echo "$flywayDiffs"

              # Check if the prepare command succeeded and handle logic accordingly
              if [[ $EXIT_CODE -eq 0 && "$flywayDiffs" == *"no differences detected"* ]]; then
                echo "No changes to generate. Exiting script gracefully."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED;isOutput=true]false"
                echo "##vso[task.setvariable variable=CHANGES_DETECTED_LOCAL]false"
                exit 0  # Graceful exit
              elif [[ $EXIT_CODE -eq 0 ]]; then
                echo "Changes detected. Proceeding with further steps."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED;isOutput=true]true"
                echo "##vso[task.setvariable variable=CHANGES_DETECTED_LOCAL]true"
              else
                echo "Error: The flyway prepare command failed. Exiting script with error."
                exit 1  # Exit with error
              fi

        # Step 3 - Publish Check Report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          continueOnError: true
          condition: and(succeeded(), eq(variables['CHANGES_DETECTED_LOCAL'], 'true'), eq(variables['generateReport'], 'true'))
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)'

    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      condition: and(succeeded(), eq(dependencies.changeReport.outputs['prepareScript.CHANGES_DETECTED'], 'true'))
      pool: server
      steps:
        # Optional - Manual Validation Step
        - task: ManualValidation@0
          condition: eq(variables['pauseForCodeReview'], true)
          displayName: 'Review Change Report Prior To Release'
          timeoutInMinutes: 4320 
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      condition: and(succeeded(), eq(dependencies.changeReport.outputs['prepareScript.CHANGES_DETECTED'], 'true'))
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Deployment Artifact'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), ne(variables['FLYWAY_AUTH_DISABLED'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Flyway - Deploy Pending migrations to target environment
        - task: Bash@3
          displayName: 'Flyway CLI - Deploy Changes'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            script: |
              echo "Flyway CLI - Deploying differences to: $(TARGET_ENVIRONMENT)"
              flyway deploy \
                "-environment=$(TARGET_ENVIRONMENT)" \
                "-environments.$(TARGET_ENVIRONMENT).user=$(TARGET_DATABASE_USERNAME)" \
                "-environments.$(TARGET_ENVIRONMENT).password=$(TARGET_DATABASE_PASSWORD)" \
                "-deploy.scriptFilename=$(System.ArtifactsDirectory)/Flyway-CD-Reports-$(Build.BuildId)/$(SCRIPT_FILENAME)" \
                $(CUSTOM_PARAMETERS)

  - stage: Prod
    displayName: Prod Stage
    dependsOn: Test
    #pool: "" # By default the global Agent Pool will be used for all stages. Each stage could instead be given a custom Agent Pool here if required, typically for security reasons.
    variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotTest" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_DATABASE_URL/REPORT_DATABASE_USER/REPORT_DATABASE_PASSWORD
      # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure
      - name: DATABASE_NAME
        value: "AutoPilotProd"
      - name: SOURCE_ENVIRONMENT
        value: "schemaModel"
      - name: TARGET_ENVIRONMENT # This variable refers to the environment name present in the Flyway Projects TOML file.
        value: "Prod"
      - name: SCRIPT_FILENAME
        value: "Flyway-$(DATABASE_NAME)-AutoDeploymentScript.sql"
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: generateReport
        value: "true" # Turn to false to skip the CHECK report stage tasks
      - name: pauseForCodeReview
        value: "true"
      - name: FLYWAY_CHECK_DRIFT_ON_MIGRATE
        value: "$(FLYWAY_DRIFT_ON_MIGRATE)" # Setting this variable to true will enable the Flyway Pipelines drift detection
    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition: 
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifact'
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), eq(variables['generateReport'], true), ne(variables['FLYWAY_AUTH_DISABLED'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        - task: Bash@3
          name: 'prepareScript'
          displayName: 'Flyway CLI - Prepare Script'
          condition: and(succeeded(), eq(variables['generateReport'], 'true'))
          inputs:
            targetType: 'inline'
            script: |
              # Run Flyway prepare command and capture output
              echo "Flyway CLI - Detecting differences between $(SOURCE_ENVIRONMENT) and $(TARGET_ENVIRONMENT)"
              flywayDiffs=$(flyway prepare \
                "-prepare.source=$(SOURCE_ENVIRONMENT)" \
                "-prepare.target=$(TARGET_ENVIRONMENT)" \
                "-environments.$(TARGET_ENVIRONMENT).user=$(TARGET_DATABASE_USERNAME)" \
                "-environments.$(TARGET_ENVIRONMENT).password=$(TARGET_DATABASE_PASSWORD)" \
                "-prepare.scriptFilename=$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)" \
                -configFiles="$(WORKING_DIRECTORY)/flyway.toml" \
                $(CUSTOM_PARAMETERS) 2>&1)

              # Capture exit code
              EXIT_CODE=$?

              # Display output in console
              echo "$flywayDiffs"

              # Check if the prepare command succeeded and handle logic accordingly
              if [[ $EXIT_CODE -eq 0 && "$flywayDiffs" == *"no differences detected"* ]]; then
                echo "No changes to generate. Exiting script gracefully."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED;isOutput=true]false"
                echo "##vso[task.setvariable variable=CHANGES_DETECTED_LOCAL]false"
                exit 0  # Graceful exit
              elif [[ $EXIT_CODE -eq 0 ]]; then
                echo "Changes detected. Proceeding with further steps."
                echo "##vso[task.setvariable variable=CHANGES_DETECTED;isOutput=true]true"
                echo "##vso[task.setvariable variable=CHANGES_DETECTED_LOCAL]true"
              else
                echo "Error: The flyway prepare command failed. Exiting script with error."
                exit 1  # Exit with error
              fi
        # Step 3 - Publish Check Report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          continueOnError: true
          condition: and(succeeded(), eq(variables['CHANGES_DETECTED_LOCAL'], 'true'), eq(variables['generateReport'], true))
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(WORKING_DIRECTORY)/Artifact/$(SCRIPT_FILENAME)'
        

    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      condition: and(succeeded(), eq(dependencies.changeReport.outputs['prepareScript.CHANGES_DETECTED'], 'true'))
      pool: server
      steps:
        # Optional - Manual Validation Step
        - task: ManualValidation@0
          condition: eq(variables['pauseForCodeReview'], true)
          displayName: 'Review Change Report Prior To Release'
          timeoutInMinutes: 4320 
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      condition: and(succeeded(), eq(dependencies.changeReport.outputs['prepareScript.CHANGES_DETECTED'], 'true'))
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifacts
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Deployment Artifact'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), ne(variables['FLYWAY_AUTH_DISABLED'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Flyway - Deploy Pending migrations to target environment
        - task: Bash@3
          displayName: 'Flyway CLI - Deploy Changes'
          condition: succeeded()
          inputs:
            targetType: 'inline'
            script: |
              echo "Flyway CLI - Deploying differences to: $(TARGET_ENVIRONMENT)"
              flyway deploy \
                "-environment=$(TARGET_ENVIRONMENT)" \
                "-environments.$(TARGET_ENVIRONMENT).user=$(TARGET_DATABASE_USERNAME)" \
                "-environments.$(TARGET_ENVIRONMENT).password=$(TARGET_DATABASE_PASSWORD)" \
                "-deploy.scriptFilename=$(System.ArtifactsDirectory)/Flyway-CD-Reports-$(Build.BuildId)/$(SCRIPT_FILENAME)" \
                $(CUSTOM_PARAMETERS)
