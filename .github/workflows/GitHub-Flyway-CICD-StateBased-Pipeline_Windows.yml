# This is a basic workflow to help you get started with Actions
 
name: GitHub-Autopilot-Simple-State-Pipeline-Windows

on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  #push:
    #branches:
      #- release
      #- 'migrations/**'
 
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
env:
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: false

  ### Step 1: Define Environment Secrets ###
  ### Environment Secrets - Create Environment Secrets ###
  ### Navigate to Settings > Secrets & Variables > Actions
  # FLYWAY_EMAIL: Enter the email address linked to the Redgate Account that created the PAT
  # FLYWAY_TOKEN: Enter the PAT Value (This should be treated like a password and thus as a secure variable.
  # FLYWAY_AUTH_DISABLED: (Optional) - Create and set to true to skip the auth check stage
  # FLYWAY_CLI_INSTALL  (Optional) - Default is empty (Or false): Set as 'true' to enable a Flyway CLI validate and Install step
  # TARGET_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
  # TARGET_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
  # CUSTOM_PARAMS: Optional - Used for passing custom Flyway Parameters to each Flyway command
  ### End of Environment Variables ###
  
  # Step 3: Authenticate Flyway with Personal Access Tokens (PATs)
  # Details on how to do this can be found here: https://documentation.red-gate.com/flyway/flyway-cli-and-api/tutorials/tutorial-personal-access-tokens
  # Documentation on all available Authentication methods can be found here: https://documentation.red-gate.com/fd/flyway-licensing-263061944.html
  FLYWAY_EMAIL: "${{ secrets.FLYWAY_EMAIL }}" # Enter the email address linked to the Redgate Account that created the PAT
  FLYWAY_TOKEN: "${{ secrets.FLYWAY_TOKEN }}" # Enter the PAT Value (This should be treated like a password and thus as a secure variable.
  FLYWAY_AUTH_DISABLED: "${{ secrets.FLYWAY_AUTH_DISABLED }}" # Create and set to true to skip the auth check stage, useful when Offline Permits are in use instead.

  
  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002" # This should match the first undo version in your project

  # Optional: Validate Flyway CLI installation for ephemeral agents.
  FLYWAY_CLI_INSTALL_CHECK: "${{ secrets.FLYWAY_CLI_INSTALL }}" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "Latest" # This outlines the version of Flyway CLI that will be downloaded if no Flyway CLI is detected on the target agent (Examples - '11.0.0' for specific version. Or 'Latest' for latest version)
  FLYWAY_INSTALL_DIRECTORY: "C:\\FlywayCLI\\" # The path on the agent machine where Flyway CLI will be installed  

  # Optional: Side Quest #1 - Enable Flyway Pipeline Integration for tracking releases and drift. - https://flyway.red-gate.com/
  FLYWAY_PUBLISH_RESULT: "true" # Set this value to true to enable Flyway Pipelines and track your releases centrally!
  FLYWAY_DRIFT_ON_MIGRATE: "true" # Set this value to true to enable Flyway Pipelines drift detection and track your drift centrally!
 
### DO NOT EDIT BELOW THIS LINE - All variables set in the above section will be consumed by the jobs below and therefore do not require any updates to function ###

jobs:
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'build'
    env:
      stage: 'Build'
      displayName: 'Build'
      DATABASE_NAME: 'AutoPilotBuild'
      ENVIRONMENT: 'Build' # This variable refers to the environment name present in the Flyway Projects TOML file. 
      SOURCE_ENVIRONMENT: "schemaModel"
      TARGET_ENVIRONMENT: "Build"
      SCRIPT_FILENAME: "Flyway-AutoPilotBuild-AutoDeploymentScript.sql"
      TARGET_DATABASE_USERNAME: "${{ secrets.TARGET_DATABASE_USERNAME }}"
      TARGET_DATABASE_PASSWORD: "${{ secrets.TARGET_DATABASE_PASSWORD }}"
      CUSTOM_PARAMS: "${{ secrets.CUSTOM_PARAMS }}" # Secure method of adding custom Flyway Parameters (Example -X for debug)
      EXECUTE_BUILD: 'true' # Turn to false to skip the build stage tasks
      publishArtifacts: 'true' # Turn to false to skip the artifact upload
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Optional - If Enabled, Flyway CLI will be validated and installed if not present
      - name: Flyway - CLI Install Manual Validation
        if: env.FLYWAY_CLI_INSTALL_CHECK == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            echo "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            echo "Updating PATH environment variable to include Flyway CLI Path"
              echo "${{ env.FLYWAY_INSTALL_DIRECTORY }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            echo "Error: Script not found at path $scriptPath"
            exit 1
          }
      # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        if: ${{ env.EXECUTE_BUILD == 'true' && env.FLYWAY_AUTH_DISABLED != 'true' && success() }}
        run: |
         flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
        # Step 2 - Prepare: Detect differences and create deployment script
      - name: Flyway CLI - Prepare Scripts
        if: ${{ env.EXECUTE_BUILD == 'true' && success() }}
        run: |
          flyway prepare `
          "-prepare.source=${{ env.SOURCE_ENVIRONMENT }}" `
          "-prepare.target=${{ env.TARGET_ENVIRONMENT }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.user=${{ env.TARGET_DATABASE_USERNAME }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.password=${{ env.TARGET_DATABASE_PASSWORD }}" `
          "-prepare.scriptFilename=${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
          "-prepare.force=true" `
          -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" `
          -schemaModelLocation="${{ GITHUB.WORKSPACE }}\schema-model" `
          ${{ env.CUSTOM_PARAMS }} | Tee-Object -Variable flywayDiffs  # Capture Flyway Diff output to variable flywayDiffs and show output in console

          # Check if the prepare command succeeded and handle logic accordingly
          if ($LASTEXITCODE -eq 0 -and $flywayDiffs -like "*no differences detected*") {
            Write-Host "No changes to generate. Exiting script gracefully."
            echo "CHANGES_DETECTED=false" >> $env:GITHUB_ENV
            exit 0  # Graceful exit
          } elseif ($LASTEXITCODE -eq 0) {
            Write-Host "Changes detected. Proceeding with further steps."
             echo "CHANGES_DETECTED=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Error: The flyway prepare command failed. Exiting script with error."
            exit 1  # Exit with error
          }
      # Step 3 - Deploy: Deploy changes to target environment
      - name: Flyway CLI - Deploy Changes
        if: ${{ env.EXECUTE_BUILD == 'true' && env.CHANGES_DETECTED == 'true' && success() }}
        run: |
            echo "Flyway CLI - Deploying differences to: ${{ env.TARGET_ENVIRONMENT }}"
            flyway deploy `
            -environment="${{ env.TARGET_ENVIRONMENT }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.user="${{ env.TARGET_DATABASE_USERNAME }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.password="${{ env.TARGET_DATABASE_PASSWORD }}" `
            -deploy.scriptFilename="${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
            ${{ env.CUSTOM_PARAMS }}
      # GitHub - After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: ${{ env.publishArtifacts == 'true' && success() }}
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-build-artifact-${{ github.run_number }}
          path: |
              !${{ GITHUB.WORKSPACE }}/flyway-*/**/*
              !${{ GITHUB.WORKSPACE }}/.git/**/*
              !${{ GITHUB.WORKSPACE }}/.git*/**/*
              ${{ GITHUB.WORKSPACE }}/**/schema-model/**/*
              ${{ GITHUB.WORKSPACE }}/**/migrations/**/*
              ${{ GITHUB.WORKSPACE }}/**/Scripts/**/*
              ${{ GITHUB.WORKSPACE }}/**/backups/**/*
              ${{ GITHUB.WORKSPACE }}/**/flyway.toml
              ${{ GITHUB.WORKSPACE }}/**/Filter.scpf

  test:
    name: Deploy Test
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'test' # This refers to GitHub's Environment name
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: build
    env:
      stage: 'Test'
      DATABASE_NAME: "AutoPilotTest"
      ENVIRONMENT: "Test" # Refers to the environment in the Flyway Project TOML file.
      SOURCE_ENVIRONMENT: "schemaModel"
      TARGET_ENVIRONMENT: "Test"
      SCRIPT_FILENAME: "Flyway-AutoPilotTest-AutoDeploymentScript.sql"
      TARGET_DATABASE_USERNAME: "${{ secrets.TARGET_DATABASE_USERNAME }}"
      TARGET_DATABASE_PASSWORD: "${{ secrets.TARGET_DATABASE_PASSWORD }}"
      CUSTOM_PARAMS: "${{ secrets.CUSTOM_PARAMS }}" # Secure method of adding custom Flyway Parameters (Example -X for debug)
      GENERATE_REPORT: 'true' # Turn to false to skip the CHECK report stage tasks
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/download-artifact@v4
        with:
          name: flyway-build-artifact-${{ github.run_number }}
      # Optional - List out all build artifact files on disk, helpful for debugging
      - name: Display structure of downloaded files
        run: ls -R
      # Optional - If Enabled, Flyway CLI will be validated and installed if not present
      - name: Flyway - CLI Install Manual Validation
        if: env.FLYWAY_CLI_INSTALL_CHECK == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            echo "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            echo "Updating PATH environment variable to include Flyway CLI Path"
              echo "${{ env.FLYWAY_INSTALL_DIRECTORY }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            echo "Error: Script not found at path $scriptPath"
            exit 1
          }
      # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        if: ${{ success() && env.FLYWAY_AUTH_DISABLED != 'true' }}
        run: |
         flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
      # Step 2 - Prepare: Detect differences and create deployment script
      - name: Flyway CLI - Prepare Scripts
        if: ${{ env.GENERATE_REPORT == 'true' && success() }}
        run: |
          flyway prepare `
          "-prepare.source=${{ env.SOURCE_ENVIRONMENT }}" `
          "-prepare.target=${{ env.TARGET_ENVIRONMENT }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.user=${{ env.TARGET_DATABASE_USERNAME }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.password=${{ env.TARGET_DATABASE_PASSWORD }}" `
          "-prepare.scriptFilename=${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
          "-prepare.force=true" `
          -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" `
          -schemaModelLocation="${{ GITHUB.WORKSPACE }}\schema-model" `
          ${{ env.CUSTOM_PARAMS }} | Tee-Object -Variable flywayDiffs  # Capture Flyway Diff output to variable flywayDiffs and show output in console

          # Check if the prepare command succeeded and handle logic accordingly
          if ($LASTEXITCODE -eq 0 -and $flywayDiffs -like "*no differences detected*") {
            Write-Host "No changes to generate. Exiting script gracefully."
            echo "CHANGES_DETECTED=false" >> $env:GITHUB_ENV
            exit 0  # Graceful exit
          } elseif ($LASTEXITCODE -eq 0) {
            Write-Host "Changes detected. Proceeding with further steps."
            echo "CHANGES_DETECTED=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Error: The flyway prepare command failed. Exiting script with error."
            exit 1  # Exit with error
          }
      # Step 3 - Publish Check Report
      - name: Publish Check Report as Artifact
        if: ${{ env.GENERATE_REPORT == 'true' && success() }}
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-reports-test
          path: ${{ GITHUB.WORKSPACE }}/Artifact/${{ env.SCRIPT_FILENAME }}  

      # Step 3 - Deploy: Deploy changes to target environment
      - name: Flyway CLI - Deploy Changes
        if: ${{ env.CHANGES_DETECTED == 'true' && success() }}
        run: |
            echo "Flyway CLI - Deploying differences to: ${{ env.TARGET_ENVIRONMENT }}"
            flyway deploy `
            -environment="${{ env.TARGET_ENVIRONMENT }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.user="${{ env.TARGET_DATABASE_USERNAME }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.password="${{ env.TARGET_DATABASE_PASSWORD }}" `
            -deploy.scriptFilename="${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
            ${{ env.CUSTOM_PARAMS }}

  prod:
    name: Deploy Prod
    # The type of runner that the job will run on
    runs-on: "self-hosted" # Options - self-hosted/ubuntu-latest/windows-latest (See here for more details on GitHub hosted runners - https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners)
    environment: 'prod'
    if: ${{ true }}
    needs: test
    env:
      stage: 'Prod'
      DATABASE_NAME: "AutoPilotProd"
      ENVIRONMENT: "Prod" # Refers to the environment name in the Flyway Project TOML file.
      SOURCE_ENVIRONMENT: "schemaModel"
      TARGET_ENVIRONMENT: "Prod"
      SCRIPT_FILENAME: "Flyway-AutoPilotProd-AutoDeploymentScript.sql"
      TARGET_DATABASE_USERNAME: "${{ secrets.TARGET_DATABASE_USERNAME }}"
      TARGET_DATABASE_PASSWORD: "${{ secrets.TARGET_DATABASE_PASSWORD }}"
      CUSTOM_PARAMS: "${{ secrets.CUSTOM_PARAMS }}" # Secure method of adding custom Flyway Parameters (Example -X for debug)
      GENERATE_REPORT: 'true' # Turn to false to skip the CHECK report stage tasks 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/download-artifact@v4
        with:
          name: flyway-build-artifact-${{ github.run_number }}
      # Optional - List out all build artifact files on disk, helpful for debugging
      - name: Display structure of downloaded files
        run: ls -R
      # Optional - If Enabled, Flyway CLI will be validated and installed if not present
      - name: Flyway - CLI Install Manual Validation
        if: env.FLYWAY_CLI_INSTALL_CHECK == 'true'
        run: |
          $scriptPath = "${{ GITHUB.WORKSPACE }}/scripts/Flyway_DownloadAndInstallCLI.ps1"
          if (Test-Path $scriptPath) {
            echo "Script found. Running Flyway_DownloadAndInstallCLI.ps1..."
            & $scriptPath
            echo "Updating PATH environment variable to include Flyway CLI Path"
              echo "${{ env.FLYWAY_INSTALL_DIRECTORY }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } 
          else {
            echo "Error: Script not found at path $scriptPath"
            exit 1
          }
       # Step 1 - Flyway License Authentication #
      - name: Flyway Authentication
        if: ${{ success() && env.FLYWAY_AUTH_DISABLED != 'true' }}
        run: |
         flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
      # Step 2 - Prepare: Detect differences and create deployment script
      - name: Flyway CLI - Prepare Scripts
        if: ${{ env.GENERATE_REPORT == 'true' && success() }}
        run: |
          flyway prepare `
          "-prepare.source=${{ env.SOURCE_ENVIRONMENT }}" `
          "-prepare.target=${{ env.TARGET_ENVIRONMENT }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.user=${{ env.TARGET_DATABASE_USERNAME }}" `
          "-environments.${{ env.TARGET_ENVIRONMENT }}.password=${{ env.TARGET_DATABASE_PASSWORD }}" `
          "-prepare.scriptFilename=${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
          "-prepare.force=true" `
          -configFiles="${{ GITHUB.WORKSPACE }}\flyway.toml" `
          -schemaModelLocation="${{ GITHUB.WORKSPACE }}\schema-model" `
          ${{ env.CUSTOM_PARAMS }} | Tee-Object -Variable flywayDiffs  # Capture Flyway Diff output to variable flywayDiffs and show output in console

          # Check if the prepare command succeeded and handle logic accordingly
          if ($LASTEXITCODE -eq 0 -and $flywayDiffs -like "*no differences detected*") {
            Write-Host "No changes to generate. Exiting script gracefully."
            echo "CHANGES_DETECTED=false" >> $env:GITHUB_ENV
            exit 0  # Graceful exit
          } elseif ($LASTEXITCODE -eq 0) {
            Write-Host "Changes detected. Proceeding with further steps."
            echo "CHANGES_DETECTED=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Error: The flyway prepare command failed. Exiting script with error."
            exit 1  # Exit with error
          }
      # Step 3 - Publish Check Report
      - name: Publish Check Report as Artifact
        if: ${{ env.GENERATE_REPORT == 'true' && success() }}
        uses: actions/upload-artifact@v4
        with: 
          name: flyway-reports-test
          path: ${{ GITHUB.WORKSPACE }}/Artifact/${{ env.SCRIPT_FILENAME }}  

      # Step 3 - Deploy: Deploy changes to target environment
      - name: Flyway CLI - Deploy Changes
        if: ${{ env.CHANGES_DETECTED == 'true' && success() }}
        run: |
            echo "Flyway CLI - Deploying differences to: ${{ env.TARGET_ENVIRONMENT }}"
            flyway deploy `
            -environment="${{ env.TARGET_ENVIRONMENT }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.user="${{ env.TARGET_DATABASE_USERNAME }}" `
            -environments.${{ env.TARGET_ENVIRONMENT }}.password="${{ env.TARGET_DATABASE_PASSWORD }}" `
            -deploy.scriptFilename="${{ GITHUB.WORKSPACE }}\Artifact\${{ env.SCRIPT_FILENAME }}" `
            ${{ env.CUSTOM_PARAMS }}
